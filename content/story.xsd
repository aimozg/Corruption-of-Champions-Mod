<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xs:import namespace="http://www.w3.org/2001/XMLSchema-instance" schemaLocation="xsi.xsd"/>
    <!-- default namespace = "xxc-story" -->
    <!-- core xlogic -->
    <xs:group name="content">
        <xs:sequence>
            <xs:choice minOccurs="0">
                <xs:element ref="b"/>
                <xs:element ref="i"/>
                <xs:element ref="font"/>
                <xs:element ref="if"/>
                <xs:element ref="switch"/>
                <xs:element ref="xcc-content"/>
            </xs:choice>
        </xs:sequence>
    </xs:group>
    <xs:element name="if">
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
                <xs:group minOccurs="0" maxOccurs="unbounded" ref="elseif"/>
                <xs:group minOccurs="0" ref="else"/>
            </xs:sequence>
            <xs:attribute name="test" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:group name="if-big">
        <xs:sequence>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="elseif"/>
            <xs:group minOccurs="0" ref="else"/>
        </xs:sequence>
    </xs:group>
    <xs:attributeGroup name="if-short">
        <xs:attribute name="then" use="required"/>
        <xs:attribute name="else"/>
    </xs:attributeGroup>
    <xs:group name="elseif">
        <xs:sequence>
            <xs:element ref="elseif"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
        </xs:sequence>
    </xs:group>
    <xs:element name="elseif">
        <xs:complexType>
            <xs:attribute name="test" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:group name="else">
        <xs:sequence>
            <xs:element ref="else"/>
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
        </xs:sequence>
    </xs:group>
    <xs:element name="else">
        <xs:complexType/>
    </xs:element>
    <xs:element name="switch">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="case"/>
                <xs:element minOccurs="0" ref="default"/>
            </xs:sequence>
            <xs:attribute name="value"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="case">
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
            <xs:attribute name="test"/>
            <xs:attribute name="value"/>
            <xs:attribute name="values"/>
            <xs:attribute name="lt"/>
            <xs:attribute name="gt"/>
            <xs:attribute name="ne"/>
            <xs:attribute name="lte"/>
            <xs:attribute name="gte"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="default">
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
        </xs:complexType>
    </xs:element>
    <!-- xxc statements -->
    <xs:element name="b">
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="i">
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="font">
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
            <xs:attribute name="color"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="xcc-named-content" abstract="true" substitutionGroup="xcc-content"/>
    <xs:element name="xcc-content" abstract="true"/>
    <xs:element name="t" substitutionGroup="xcc-content" type="xs:string"/>
    <xs:complexType name="namedBlock" mixed="true">
        <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
        <xs:attribute name="name"/>
    </xs:complexType>
    <xs:element name="text" substitutionGroup="xcc-named-content" type="namedBlock"/>
    <xs:element name="string" substitutionGroup="xcc-named-content" type="namedBlock"/>
    <xs:element name="lib" substitutionGroup="xcc-named-content">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="xcc-named-content"/>
            </xs:sequence>
            <xs:attribute name="name" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="scene" substitutionGroup="xcc-named-content">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="namedBlock">
                    <xs:attribute ref="xsi:noNamespaceSchemaLocation"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="macro" substitutionGroup="xcc-named-content" type="namedBlock"/>
    <xs:element name="set" substitutionGroup="xcc-content">
        <xs:complexType mixed="true">
            <xs:attribute name="var" use="required"/>
            <xs:attribute name="value"/>
            <xs:attribute name="op">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="append"/>
                        <xs:enumeration value="set"/>
                        <xs:enumeration value="add"/>
                        <xs:enumeration value="+="/>
                        <xs:enumeration value="="/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="extend-story" substitutionGroup="xcc-named-content" type="namedBlock"/>
    <xs:element name="display" substitutionGroup="xcc-content">
        <xs:complexType>
            <xs:attribute name="ref" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="command" substitutionGroup="xcc-content" type="xs:string"/>
    <xs:element name="output" substitutionGroup="xcc-content" type="xs:string"/>
    <xs:element name="include" substitutionGroup="xcc-content">
        <xs:complexType>
            <xs:attribute name="path" use="required"/>
            <xs:attribute name="required">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="true"/>
                        <xs:enumeration value="false"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <!-- mod content -->
    <xs:element name="mod-content" abstract="true" substitutionGroup="xcc-named-content"/>
    <!-- | mod-armor | fork-armor -->
    <xs:element name="armor" substitutionGroup="mod-content">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="short"/>
                <xs:element ref="name"/>
                <xs:element ref="long"/>
                <xs:element ref="description"/>
                <xs:element ref="value"/>
                <xs:element ref="defense"/>
                <xs:element ref="subType"/>
                <xs:element ref="supportsUndergarment"/>
                <xs:element ref="perk"/>
                <xs:element ref="onEquip"/>
            </xs:choice>
            <xs:attribute name="id" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="short" type="xs:string"/>
    <xs:element name="name" type="xs:string"/>
    <xs:element name="long" type="xs:string"/>
    <xs:element name="description" type="xs:string"/>
    <xs:element name="value" type="xs:string"/>
    <xs:element name="defense" type="xs:string"/>
    <xs:element name="subType" type="xs:string"/>
    <xs:element name="supportsUndergarment">
        <xs:simpleType>
            <xs:restriction base="xs:token">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
            </xs:restriction>
        </xs:simpleType>
    </xs:element>
    <xs:element name="perk">
        <xs:complexType>
            <xs:all>
                <xs:element minOccurs="0" ref="value1"/>
                <xs:element minOccurs="0" ref="value2"/>
                <xs:element minOccurs="0" ref="value3"/>
                <xs:element minOccurs="0" ref="value4"/>
            </xs:all>
            <xs:attribute name="id" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="value1" type="xs:string"/>
    <xs:element name="value2" type="xs:string"/>
    <xs:element name="value3" type="xs:string"/>
    <xs:element name="value4" type="xs:string"/>
    <xs:element name="onEquip">
        <xs:complexType mixed="true">
            <xs:group minOccurs="0" maxOccurs="unbounded" ref="content"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="reflist" substitutionGroup="mod-content">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" maxOccurs="unbounded" ref="ref"/>
            </xs:sequence>
            <xs:attribute name="id" use="required"/>
            <xs:attribute name="type" use="required">
                <xs:simpleType>
                    <xs:restriction base="xs:token">
                        <xs:enumeration value="any"/>
                        <xs:enumeration value="ItemType"/>
                        <xs:enumeration value="PerkType"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    <xs:element name="ref">
        <xs:complexType>
            <xs:attribute name="id" use="required"/>
        </xs:complexType>
    </xs:element>
</xs:schema>
