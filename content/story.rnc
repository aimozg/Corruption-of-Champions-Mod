namespace xsi = "http://www.w3.org/2001/XMLSchema-instance"
# default namespace = "xxc-story"

start = scene

# core xlogic
content =
    text | b | i | font | if | switch | xcc-content
expression = text
array-content-expression = text
if = element if {
    ifBody
}
ifBody =
    attribute test { expression },
    (content* | attribute then { text }),
    (elseif|else|attribute else { text })?
elseif = element elseif {
    ifBody
}
else = element else {
    content*
}
switch = element switch {
    attribute value { expression }?,
    case*,
    Default?
}
case = element case {
    attribute test { expression }?,
    attribute value { expression }?,
    attribute values { array-content-expression }?,
    attribute lt { expression }?,
    attribute gt { expression }?,
    attribute ne { expression }?,
    attribute lte { expression }?,
    attribute gte { expression }?,
    content*
}
Default = element default {
    content*
}
# xxc statements
b = element b { content* }
i = element i { content* }
font = element font {
    attribute color { text }?,
    content*
}
xcc-named-content = Text | String | lib | scene | macro | extend-story | mod-content
xcc-content = xcc-named-content
    | display | command | output | Include
    | set
namedBlock = attribute name { text }?, content*
Text = element text { namedBlock }
String = element string { namedBlock }
lib = element lib {
	attribute name { text },
	xcc-named-content*
}
scene = element scene {
	attribute xsi:noNamespaceSchemaLocation { text }?
	&namedBlock
}
macro = element macro { namedBlock }
set = element set {
    attribute var { text },
    attribute value { expression }?,
    attribute op { 'append' | 'set' | 'add' | "+=" | '=' }?,
    text*
}
extend-story = element extend-story { namedBlock }
display = element display {
    attribute ref { text },
    empty
}
command = element command {
    text
}
output = element output { expression }
Include = element include {
    attribute path { text },
    attribute required { "true" | "false" }?,
    empty
}
# mod content
mod-content = armor | reflist #| mod-armor | fork-armor
armor = element armor {
	attribute id { text }
	& element short { text }
	& element name { text }
	& element long { text }
	& element description { text }?
	& element value { text }?
	& element defense { text }?
	& element subType { text }?
	& element supportsUndergarment { "true" | "false" }?
	& element perk {
		attribute id { text }
		& element value1 { text }?
		& element value2 { text }?
		& element value3 { text }?
		& element value4 { text }?
	}*
}
reflist = element reflist {
	attribute id { text }
	& attribute type { "any" | "ItemType" | "PerkType" }
	& element ref {
		attribute id { text }
		& empty
	}*
}